{"version":3,"sources":["components/TableCell.js","components/Table.js","App.js","serviceWorker.js","index.js"],"names":["TableCell","props","style","width","height","border","onMouseDown","mouseDown","onMouseEnter","mouseEnter","onMouseUp","mouseUp","Table","addRow","event","setState","rowNumber","addColumn","columnNumber","deleteRow","alert","deleteColumn","changeColor","color","target","value","assignColor","backgroundColor","state","check","fillAllColor","filler","document","getElementsByTagName","i","length","fillMissingColor","clearColor","myTableRow","this","myTableColumn","j","push","onClick","className","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c38a0eb7.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction TableCell(props) {\r\n  return (\r\n    <td style= {{width: \"100px\", height: \"50px\", border: \"black solid\"}} onMouseDown={props.mouseDown} onMouseEnter={props.mouseEnter} onMouseUp={props.mouseUp} ></td>\r\n  );\r\n}\r\n\r\nexport default TableCell;","import React, { Component } from 'react';\r\nimport TableCell from './TableCell.js';\r\n\r\nclass Table extends Component {\r\n  constructor(){\r\n    super();\r\n      this.state= {\r\n        rowNumber: 1,\r\n        columnNumber: 1,\r\n        color: \"red\",\r\n        check: false,\r\n      };\r\n  }\r\n\r\n  addRow = (event) => {\r\n    this.setState({rowNumber: event.rowNumber + 1});\r\n  }\r\n\r\n  addColumn = (event) => {\r\n    this.setState({columnNumber: event.columnNumber + 1});\r\n  }\r\n\r\n  deleteRow = (event) => {\r\n    if (event.rowNumber === 1) {\r\n      return alert(\"Row cannot be less than one\");\r\n    }\r\n    else {\r\n      this.setState({rowNumber: event.rowNumber - 1});\r\n    }\r\n  }\r\n\r\n  deleteColumn = (event) => {\r\n    if (event.columnNumber === 1) {\r\n      return alert(\"Column cannot be less than one\");\r\n    }\r\n    else {\r\n      this.setState({columnNumber: event.columnNumber - 1});\r\n    }\r\n  }\r\n\r\n  changeColor = (event) => {\r\n    this.setState({color: event.target.value});\r\n  }\r\n\r\n  assignColor = (event) => {\r\n    event.target.style.backgroundColor = this.state.color;\r\n  }\r\n\r\n  mouseDown = (event) => {\r\n    this.setState({check: true});\r\n  }\r\n\r\n  mouseUp = (event) => {\r\n    this.setState({check: false});\r\n  }\r\n\r\n  mouseEnter = (event) => {\r\n    if (this.state.check === true){\r\n      event.target.style.backgroundColor = this.state.color;\r\n    }\r\n  }\r\n\r\n\r\n  fillAllColor = (event) => {\r\n    let filler = document.getElementsByTagName(\"td\");\r\n    for (let i = 0; i < filler.length; i++){\r\n      filler[i].style.backgroundColor = this.state.color;\r\n    }\r\n  }\r\n\r\n  fillMissingColor = (event) => {\r\n    let filler = document.getElementsByTagName(\"td\");\r\n    for (let i = 0; i < filler.length; i++){\r\n      if(filler[i].style.backgroundColor === \"\"){\r\n        filler[i].style.backgroundColor = this.state.color;\r\n      }\r\n    }\r\n  }\r\n\r\n  clearColor = (event) => {\r\n    let filler = document.getElementsByTagName(\"td\");\r\n    for (let i = 0; i < filler.length; i++){\r\n      filler[i].style.backgroundColor = null;\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    let myTableRow = [];\r\n    for(let i = 0; i < this.state.rowNumber; i++){\r\n      let myTableColumn = [];\r\n      for(let j = 0; j < this.state.columnNumber; j++){\r\n        myTableColumn.push(<TableCell mouseDown={this.mouseDown} mouseUp={this.mouseUp} mouseEnter={this.mouseEnter}/>);\r\n      }\r\n      myTableRow.push(<tr>{myTableColumn}</tr>)\r\n    }\r\n\r\n      return (\r\n        <div>\r\n        <button onClick={() => this.addRow(this.state)}>\r\n          Add Row\r\n        </button>\r\n        <button onClick={() => this.addColumn(this.state)}>\r\n          Add Column\r\n        </button>\r\n        <button onClick={() => this.deleteRow(this.state)}>\r\n          Delete Row\r\n        </button>\r\n        <button onClick={() => this.deleteColumn(this.state)}>\r\n          Delete Column\r\n        </button>\r\n        <button onClick={() => this.fillAllColor(this.state)}>\r\n          Fill with colors\r\n        </button>\r\n        <button onClick={() => this.fillMissingColor(this.state)}>\r\n          Fill missing with colors\r\n        </button>\r\n        <button onClick={() => this.clearColor(this.state)}>\r\n          Clear colors\r\n        </button>\r\n        <select onClick={this.changeColor}>\r\n          <option value=\"red\">Red</option>\r\n          <option value=\"blue\">Blue</option>\r\n          <option value=\"green\">Green</option>\r\n          <option value=\"yellow\">Yellow</option>\r\n        </select>\r\n        <table className= \"myTable\">\r\n          {myTableRow}\r\n        </table>\r\n        </div>\r\n      );}\r\n}\r\n\r\nexport default Table;","\r\nimport React, { Component } from 'react';\r\nimport './App.css';\r\nimport Table from './components/Table.js';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Table />\r\n    );}\r\n  }\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}